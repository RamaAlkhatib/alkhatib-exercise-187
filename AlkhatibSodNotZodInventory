//Author: [Rama Alkhatib]
//Course: CPT 187
//Purpose:[The purpose of this class is to add an inventory to count if a certain amount of a certain product is available and in stock.]
//STARTDATE:[4/13/2020]

package edu.cpt187.alkhatib.participation;

import java.io.FileInputStream;
import java.io.IOException;
import java.util.Random;
import java.util.Scanner;

public class Inventory 
{
	//declare and initialize class CONSTANTs
	private final String[] DISCOUNT_NAMES= {"Member", "Senior", "No Discount"};
	private final double[] DISCOUNT_RATES= {0.25, 0.15, 0.0};
	private final String[] PRIZE_NAMES= {"CASH REWARD", "BEAUTY PRODUCTS", "iPhone Xr"};
	private final int MAX_RECORDS=5;
	private final int NOT_FOUND=-1;
	private final int RESET_VALUE=0;

	//declare/initialize all non-CONSTANT class attributes
	private int[] itemIDs = new int[MAX_RECORDS];
	private String[] itemNames= new String[MAX_RECORDS];
	private double[] itemPrices= new double[MAX_RECORDS];
	private int[] orderQuantity=new int[MAX_RECORDS];
	private double[] orderTotal=new double[MAX_RECORDS];
	private int[] inStockCounts= new int[MAX_RECORDS];
	private int itemSearchIndex=0;
	private int recordCount=0;

	//declare and initialize the Random object for class support
	private Random prizeGenerator = new Random();

	//the Inventory class constructor
	public Inventory()
	{
	}//end of Inventory Constructor

	public void setReduceStock(int borrowedHowMany)
	{
		inStockCounts[itemSearchIndex] = inStockCounts[itemSearchIndex] - borrowedHowMany;
	}//end setReduceStock

	public void setLoadItems(String borrowedFileName)
	{
		//resets value every time method is invoked
		recordCount= RESET_VALUE;

		try
		{
			Scanner infile= new Scanner (new FileInputStream(borrowedFileName));
			//.hasNext() will be False if the next value is the EOF
			while(infile.hasNext() == true&& recordCount< 0)
			{
				//Read a complete record
				itemIDs[recordCount] = infile.nextInt();
				itemNames[recordCount] = String.valueOf(infile.nextInt());
				itemPrices[recordCount] = infile.nextDouble();
				inStockCounts[recordCount] = infile.nextInt();
				recordCount++;
			}//end of while

			//Close the Scanner/File
			infile.close();

			setBubbleSort();
		}//end of try

		catch(IOException ex) 
		{

			recordCount= NOT_FOUND;
		}//end of catch

	}//end of setLoadItems

	public void setLoadItems(String borrowedFileName, int borrowedSize)
	{
		//resets value every time method is invoked
		recordCount= RESET_VALUE;

		try
		{
			Scanner infile= new Scanner (new FileInputStream(borrowedFileName));
			//.hasNext() will be False if the next value is the EOF
			while (infile.hasNext() == true && recordCount < MAX_RECORDS && recordCount < borrowedSize)			
			{
				//Read a complete record				
				itemIDs[recordCount] = infile.nextInt();
				itemNames[recordCount] = infile.next();
				itemPrices[recordCount] = infile.nextDouble();
				orderQuantity[recordCount] = infile.nextInt();
				orderTotal[recordCount] = infile.nextDouble();
				recordCount++;
			}//end of while

			//Close the Scanner/File
			infile.close();

			setBubbleSort();
		}//end of try

		catch(IOException ex) 
		{

			recordCount= NOT_FOUND;
		}//end of catch

	}//end of setLoadItems

	public void setSearchIndex(int borrowedTargetID)
	{
		itemSearchIndex = getSearchResults(borrowedTargetID);
	}//end of setSearchIndex

	public void setBubbleSort()
	{
		int last = recordCount - 1;
		int index = 0;
		boolean swap = false;

		while (last > RESET_VALUE)
		{
			index = 0;
			swap = false;

			while (index < last)
			{
				if (itemIDs[index] > itemIDs[index + 1])
				{
					setSwapArrayElements(index);
					swap = true;
				}//end of if (itemIDs[index] > itemIDs[index + 1])
				index++;
			}//end of while (index < last)
			if (swap == false)
			{
				last = RESET_VALUE;
			}//end of if (swap == false)
			else
			{
				last = last - 1;
			}//end of else
		}//end of while (last > RESET_VALUE)		
	}//end of setBubbleSort

	public void setSwapArrayElements(int borrowedIndex)
	{
		int localItemID = 0;
		String localItemName = "";
		double localItemPrice = 0;
		int localInStockCount = 0;
		int localQuantity = 0;
		double localCost = 0.0;

		localItemID = itemIDs[borrowedIndex];
		itemIDs[borrowedIndex] = itemIDs[borrowedIndex + 1];
		itemIDs[borrowedIndex + 1] = localItemID;

		localItemName = itemNames[borrowedIndex];
		itemNames[borrowedIndex] = itemNames[borrowedIndex + 1];
		itemNames[borrowedIndex + 1] = localItemName;

		localItemPrice = itemPrices[borrowedIndex];
		itemPrices[borrowedIndex] = itemPrices[borrowedIndex + 1];
		itemPrices[borrowedIndex + 1] = localItemPrice;

		localInStockCount = inStockCounts[borrowedIndex];
		inStockCounts[borrowedIndex] = inStockCounts[borrowedIndex + 1];
		inStockCounts[borrowedIndex + 1] = localInStockCount;

		localQuantity = orderQuantity[borrowedIndex];
		orderQuantity[borrowedIndex] = orderQuantity[borrowedIndex + 1];
		orderQuantity[borrowedIndex + 1] = localQuantity;

		localCost = orderTotal[borrowedIndex];
		orderTotal[borrowedIndex] = orderTotal[borrowedIndex + 1];
		orderTotal[borrowedIndex + 1] = localCost;
	}//end of setSwapArrayElements

	//get method
	public int[] getInStockCounts()
	{
		return inStockCounts;
	}//end getInStockCounts

	public int[] getItemIDs()
	{
		return itemIDs;

	}//end of getItemIDs

	public String[] getItemNames()
	{
		return itemNames;
	}//end getItemNames

	public double[] getItemPrices()
	{
		return itemPrices;
	}//end getItemPrices

	public String[] getDiscountNames()
	{
		return DISCOUNT_NAMES;
	}//end getDiscountNames

	public double[] getDiscountRates()
	{
		return DISCOUNT_RATES;
	}//end getDiscountRate

	public int[] getOrderQuantities()
	{
		return orderQuantity;

	}//end of getOrderQuantities

	public double[] getOrderTotals()
	{
		return orderTotal;

	}//end of getOrderTotals

	public String[] getPrizeNames()
	{
		return PRIZE_NAMES;
	}//end getPrizeNames

	public int getRandomNumber()
	{			
		return prizeGenerator.nextInt(PRIZE_NAMES.length); 
	}//end getRandomNumber

	public int getMaxRecords()
	{
		return MAX_RECORDS;
	}//end of getMaxRecords

	public int getItemSearchIndex()
	{
		return itemSearchIndex;
	}//end of getItemSearchIndex

	public int getRecordCount()
	{
		return recordCount;
	}//end of getRecordCount

	public int getSearchResults(int borrowedBorrowedID)
	{
		int first = RESET_VALUE;
		int last = recordCount - 1;
		int mid = RESET_VALUE;
		boolean found = false;

		while (first <= last && found == false)
		{
			mid = (first + last) / 2;
			if (itemIDs[mid] == borrowedBorrowedID)
			{
				found = true;
			} else
			{

				if (itemIDs[mid] < borrowedBorrowedID)
				{
					first = mid + 1;
				} else
				{
					last = mid - 1;
				}
			}
		}
		if (found == false)
		{
			mid = NOT_FOUND;
		}

		return mid;
	}//end of getSearchResults
}//end of class
